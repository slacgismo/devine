///////////////////////////////////////////////////////
///////////////////////////////////////////////////////


///////////////////////////////////////////////////////
//
// DEVINE Model with EV loads
// Copyright (C) 2016, Stanford University
// Author: gcezar@slac.stanford.edu
//
///////////////////////////////////////////////////////

//
// Read the configuration file for this system
// Assumes the model is run from parent of model folder
//


#include "config/default.glm"
#define CONFIGFILE=config/default.glm
#ifexist config/local.glm
#include "config/local.glm"
#set CONFIGFILE=config/local.glm
#endif
#set suppress_repeat_messages=TRUE
#ifdef TIMEZONE
clock {
	timezone ${TIMEZONE};
#ifdef STARTTIME
	starttime ${STARTTIME};
#endif
#ifdef STOPTIME
	stoptime ${STOPTIME};
#endif
}
#else
#error TIMEZONE is not specified in ${CONFIGFILE}
#endif // TIMEZONE

#set randomseed=5 

#ifdef CONTROL_TYPE
#print "CONTROL IS ENABLED"
module EV_controls;
#endif
///////////////////////////////////////////////////////
//
// WEATHER
//
///////////////////////////////////////////////////////
#ifexist data/${WEATHER}
module climate;
object climate {
        name weather;
        tmyfile "data/${WEATHER}";
        interpolate QUADRATIC;
}
#else
#error WEATHER is not specified in ${CONFIGFILE}
#endif // exist WEATHER

module generators;

module powerflow{
	solver_method FBS;
}
module tape;


object meter {
	name bulk_node;
	nominal_voltage 2401 V;
	phases ABCN;
	bustype SWING;
	object recorder {
		property measured_real_power[kW], measured_reactive_power[kVAr]; 
		file "output/feeder_power.csv";
		interval 1h;    // Change interval for recording
	};
}

object meter {
	name feeder_node;
	nominal_voltage 2401 V;
	phases ABCN;
}

object overhead_line {
	name main_line;
	phases ABCN;
	from feeder_node;
	to main_node;
	length 3 mile;
	configuration lc301;
//	object recorder {
//		property power_losses.real; 
//		file "output/line_losses/line_losses_${RUN_NAME}.csv";
//		interval 1h;
//	};
}
object regulator {
	name main_reg;
	phases ABCN;
	from bulk_node;
	to feeder_node;
	configuration rc502;
	sense_node main_node;
}

object regulator_configuration {
	name rc502;
	connect_type WYE_WYE;
	band_center 2400.000;
	band_width 40.0;
	time_delay 30.0;
	raise_taps 16;
	lower_taps 16;
	current_transducer_ratio 50;
	power_transducer_ratio 20;
	compensator_r_setting_A 0.4;
	compensator_x_setting_A 0.4;
	CT_phase "A";
	PT_phase "A";
	regulation 0.10;
	Control OUTPUT_VOLTAGE;
	Type A;
	tap_pos_A -1;
	tap_pos_B 0;
	tap_pos_C 0;
}

//Line configurations
//ABCN
object overhead_line_conductor {
	name olc301c;	//336,400 26/7 ACSR
	geometric_mean_radius 0.0244;
	resistance 0.306;
	diameter 0.721;
}

object overhead_line_conductor {
	name olc301n;	//4/0 6/1 ACSR
	geometric_mean_radius 0.00814;
	resistance 0.592;
	diameter 0.563;
}
object line_configuration {
	name lc301;
	conductor_A olc301c;
	conductor_B olc301c;
	conductor_C olc301c;
	conductor_N olc301n;
	spacing ls500301;
}
//Line spacings
//ABCN
object line_spacing {
	name ls500301;
	distance_AB 2.5;
	distance_AC 7.0;
	distance_BC 4.5;
	distance_CN 5.0;
	distance_AN 5.65685424949;
	distance_BN 4.27200187266;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}
object meter {
	name main_node;
	nominal_voltage 2401 V;
	phases ABCN;
	object recorder {
		property measured_real_power[kW], measured_reactive_power[kVAr]; 
		file "output/feeder_power.csv";
		interval -1;
	};
}


global int32 SEQ_EVID 0;
#set allow_reinclude=true

//#include using(LOADID=1,PHASE=A,COUNT=2) "house.glm"
//#include using(LOADID=1,PHASE=B,COUNT=2) "house.glm"
//#include using(LOADID=1,PHASE=C,COUNT=2) "house.glm"

object overhead_line {
	name line_to_AB;
	phases ABN;
	from main_node;
	to main_node_AB;
	length 3 mile;
	configuration lc301;
}
object overhead_line {
	name line_to_BC;
	phases BCN;
	from main_node;
	to main_node_BC;
	length 3 mile;
	configuration lc301;
}
object overhead_line {
	name line_to_AC;
	phases ACN;
	from main_node;
	to main_node_AC;
	length 3 mile;
	configuration lc301;
}

object meter {
	name main_node_AB;
	nominal_voltage 2401 V;
	phases ABN;
}
object meter {
	name main_node_BC;
	nominal_voltage 2401 V;
	phases BCN;
}
object meter {
	name main_node_AC;
	nominal_voltage 2401 V;
	phases ACN;
}

object load:..${COUNT} {
	name `load_{SEQ_EVID:INC}`;
	groupid evs;
	parent main_node_AB;
	phases ABN;
	constant_power_A 40.000000+20.000000j;
	nominal_voltage 2401.7771;
}

